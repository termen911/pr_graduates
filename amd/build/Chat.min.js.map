{"version":3,"sources":["../src/Chat.js"],"names":["Chat","application","sender","objectId","interval","timeUpdate","lastError","isLoad","listMessagesIds","listMessages","intervalEvent","quote","messages","loaderUuid","Date","getTime","eventSend","getNewMessage","beforeGetListMessages","ajax","call","methodname","args","object_id","done","response","resultGetListMessages","fail","Notification","exception","afterGetListMessages","uid_quote","message","document","getElementById","value","beforeSendMessage","resultSendMessage","afterSendMessage","loader","show","querySelector","success","promises","buildError","buildMessage","processAllPromises","eventQuote","hideLoader","scrollToBottom","setLastTimeUpdate","errors","length","join","alert","timeout","setTimeout","hideByUuid","classList","remove","body","addEventListener","event","target","contains","clearQuote","quoteId","dataset","filter","uid_message","shift","Templates","render","then","html","js","appendNodeContents","ctrlKey","keyCode","sendMessage","clearSend","innerHTML","forEach","item","push","renderForPromise","error","stopGetNewMessage","template","data","includes","quote_message","messageGetQuote","date","convertDate","uidQuote","Promise","all","messageBlock","scrollTop","scrollHeight","setInterval","getListMessages","clearInterval","newDate","day","getDate","month","getMonth","hour","getHours","minute","getMinutes","second","getSeconds","getFullYear","init"],"mappings":"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","sourcesContent":["import ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\nimport loader from 'local_pr_graduates/components/loader';\n\n/**\n * @module local_pr_graduates/Chat\n */\n\nclass Chat {\n\n    constructor(application, sender, objectId, interval) {\n        this.timeUpdate = false;\n        this.lastError = '';\n        this.isLoad = false;\n        // Список всех идентификаторов сообщений\n        this.listMessagesIds = [];\n        // Полный массив сообщений\n        this.listMessages = [];\n        // Идентификатор приложения для чата\n        this.application = application;\n        this.objectId = objectId;\n        // Идентификатор отправителя\n        this.sender = sender;\n        // Интервал обновления чата\n        this.interval = Number(interval);\n        // Контейнер для интервала;\n        this.intervalEvent = '';\n        // Идентификатор цитируемой записи\n        this.quote = '';\n        // Сообщение\n        this.messages = '';\n        // Идентификатор загрузочного блока\n        this.loaderUuid = new Date().getTime();\n        // Назначение событий для отправки сообщений\n        this.eventSend();\n        this.getNewMessage();\n    }\n\n    // Получаем список сообщений с сервера\n    getListMessages() {\n        this.beforeGetListMessages();\n        ajax.call([{\n            methodname: 'local_pr_graduate_chat_get_messages',\n            args: {\n                application: this.application,\n                object_id: this.objectId\n            },\n            done: response => this.resultGetListMessages(response),\n            fail: Notification.exception,\n        }]);\n        this.afterGetListMessages();\n    }\n\n    // Отправляем новое сообщение\n    sendMessage() {\n        let args = {\n            sender: this.sender,\n            application: this.application,\n            uid_quote: this.quote,\n            object_id: this.objectId,\n            message: document.getElementById('textarea-container__input').value\n        };\n        this.beforeSendMessage();\n        ajax.call([{\n            methodname: 'local_pr_graduate_chat_send_message',\n            args: args,\n            done: response => this.resultSendMessage(response),\n            fail: Notification.exception,\n        }]);\n        this.afterSendMessage();\n    }\n\n    // Выполнить перед получением истории сообщений\n    beforeGetListMessages() {\n        if (!this.isLoad) {\n            loader.show(document.querySelector('[role=\"main\"]'), this.loaderUuid);\n        }\n    }\n\n    // Результат получения списка сообщений\n    async resultGetListMessages(response) {\n        let promises;\n        if (!response.success) {\n            // Выводим ошибку полученную с сервера\n            promises = this.buildError(response);\n        } else {\n            // Выводим список сообщений полученный с сервера\n            promises = this.buildMessage(response);\n        }\n\n        await this.processAllPromises(promises);\n\n        // Назначаем событие для цитирования сообщения\n        this.eventQuote();\n        // Отключаем загрузочный блок\n        this.hideLoader();\n        this.scrollToBottom();\n        this.setLastTimeUpdate();\n    }\n\n    // Выполнить после получения истории сообщений\n    afterGetListMessages() {\n    }\n\n    // Выполнить перед отправкой сообщения\n    beforeSendMessage() {\n    }\n\n    // Результат отправки сообщения\n    async resultSendMessage(response) {\n        let promises;\n        if (!response.success) {\n            let message = 'Неизвестная ошибка сервера';\n\n            if (response.errors.length) {\n                message = response.errors.join('</br>');\n            }\n            Notification.alert('Ошибка при отправке сообщения', message, 'Закрыть');\n        } else {\n            promises = this.buildMessage(response);\n        }\n        await this.processAllPromises(promises);\n\n        this.scrollToBottom();\n\n    }\n\n    // Выполнить после отправки сообщения\n    afterSendMessage() {\n    }\n\n    hideLoader() {\n        if (!this.isLoad) {\n            let timeout = 1000;\n            if (this.interval > 0 && this.interval < 1000) {\n                timeout = this.interval > 0;\n            }\n\n            setTimeout(() => {\n                loader.hideByUuid(this.loaderUuid);\n                document.getElementById('main-messaging').classList.remove('d-none');\n                this.scrollToBottom();\n                this.isLoad = true;\n            }, timeout);\n        }\n    }\n\n    eventQuote() {\n        if (!this.isLoad) {\n            document.body.addEventListener('click', (event) => {\n                if (event.target.classList.contains('add-quote')) {\n                    this.clearQuote();\n                    let quoteId = event.target.dataset.quoteId;\n                    this.quote = quoteId;\n                    let message = this.listMessages.filter(value => {\n                        return quoteId === value.uid_message;\n                    }).shift();\n                    Templates.render(\"local_pr_graduates/components/chat/quote\", message)\n                        .then((html, js) => {\n                            Templates.appendNodeContents(document.getElementById('main-messaging-quote'), html, js);\n                            document.getElementById('textarea-container__quote-delete').addEventListener('click', () => {\n                                this.clearQuote();\n                            });\n                            return null;\n                        })\n                        .fail(Notification.exception);\n                }\n            });\n        }\n    }\n\n    eventSend() {\n        document.getElementById('textarea-container__input').addEventListener('keydown', (event) => {\n            if ((event.ctrlKey) && ((event.keyCode === 0xA) || (event.keyCode === 0xD))) {\n                this.sendMessage();\n                this.clearSend();\n                this.clearQuote();\n            }\n        });\n\n        document.getElementById('textarea-container__btn').addEventListener('click', () => {\n            this.sendMessage();\n            this.clearSend();\n            this.clearQuote();\n        });\n    }\n\n    clearSend() {\n        document.getElementById('textarea-container__input').value = '';\n    }\n\n    clearQuote() {\n        document.getElementById('main-messaging-quote').innerHTML = \"\";\n        this.quote = '';\n    }\n\n    buildError(response) {\n        let promises = [];\n        if (response.errors.join(\"\\n\") === this.lastError) {\n            return promises;\n        }\n        this.lastError = response.errors.join(\"\\n\");\n        response.errors.forEach((item) => {\n            promises.push(Templates.renderForPromise(\"local_pr_graduates/components/chat/error\", {error: item}));\n        });\n        this.stopGetNewMessage();\n        return promises;\n    }\n\n    buildMessage(response) {\n        let promises = [],\n            template;\n        response.data.forEach((item) => {\n            if (!this.listMessagesIds.includes(item.uid_message)) {\n                this.listMessagesIds.push(item.uid_message);\n                this.listMessages.push(item);\n                if (item.uid_quote) {\n                    item.quote_message = this.messageGetQuote(item.uid_quote);\n                }\n\n                item.date = this.convertDate(item.date);\n\n                if (item.sender === this.sender) {\n                    template = \"local_pr_graduates/components/chat/incoming\";\n                } else {\n                    template = \"local_pr_graduates/components/chat/outgoing\";\n                }\n                promises.push(Templates.renderForPromise(template, item));\n            }\n        });\n        if (document.querySelector('.main-messaging-container__error')) {\n            document.querySelector('.main-messaging-container__error').innerHTML = '';\n        }\n        return promises;\n    }\n\n    messageGetQuote(uidQuote) {\n        return this.listMessages.filter((value) => {\n            return uidQuote === value.uid_message;\n        });\n    }\n\n    async processAllPromises(promises) {\n        if (typeof promises !== \"undefined\") {\n            (await Promise.all(promises)).forEach(({html, js}) => {\n                Templates.appendNodeContents(document.getElementById('main-messaging-container'), html, js);\n            });\n        }\n    }\n\n    scrollToBottom() {\n        let messageBlock = document.getElementById('main-messaging-container');\n        messageBlock.scrollTop = messageBlock.scrollHeight;\n    }\n\n    getNewMessage() {\n        if (this.interval > 0) {\n            this.intervalEvent = setInterval(() => {\n                this.getListMessages();\n            }, this.interval);\n        } else {\n            this.stopGetNewMessage();\n        }\n    }\n\n    stopGetNewMessage() {\n        clearInterval(this.intervalEvent);\n    }\n\n    convertDate(date) {\n        let newDate = new Date(date);\n        let day = newDate.getDate() < 10 ? '0' + newDate.getDate() : newDate.getDate();\n        let month = (newDate.getMonth() + 1) < 10 ? '0' + (newDate.getMonth() + 1) : newDate.getMonth();\n        let hour = newDate.getHours() < 10 ? '0' + newDate.getHours() : newDate.getHours();\n        let minute = newDate.getMinutes() < 10 ? '0' + newDate.getMinutes() : newDate.getMinutes();\n        let second = newDate.getSeconds() < 10 ? '0' + newDate.getSeconds() : newDate.getSeconds();\n        return `${day}.${month}.${newDate.getFullYear()} ${hour}:${minute}:${second}`;\n    }\n\n    setLastTimeUpdate() {\n        document.getElementById('time-update-container').classList.remove('d-none');\n        document.getElementById('time-update').innerHTML = \" \" + this.convertDate(new Date());\n    }\n}\n\nexport const init = (application, sender, objectId, interval) => {\n    new Chat(application, sender, objectId, interval).getListMessages();\n};"],"file":"Chat.min.js"}